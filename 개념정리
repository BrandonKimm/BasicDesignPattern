스프링에서 자주 사용되는 디자인 패턴
    자바의 객체지향스러운 특징(캡슐화/상속/추상화/다형성)을 이용해서  객체지향스럽게 설계(SOLID)하는
    실제 현장에서 쓰이고 효율적인 설계방식들을 메뉴얼화 한 것이 디자인패턴이다.
    요리(자바 웹어플리케이션) : 요리도구(캡/상/추/다) : 요리도구의 사용법(SOLID) : 요리레시피(디자인패턴) 

1. Adapter Pattern
    서로 다른 두 인터페이스 사이에 통신이 가능하게 하는 느낌 전에 JDBC 같은 케이스 OCP를 활용한 디자인패턴
    실제 수행되는 객체와 클라이언트가 필요한 서비스와 서비스가 수행되는 실제객체 사이에 어댑터를 두고 
    ==> 객체를 속성(멤버변수)으로 만들어서 참조하는 디자인 패턴
    ==> 기존클래스의 소스코드를 전혀 수정하지 않고 타겟인터페이스에 맞춰서 동작을한다.
    
2. Proxy Pattern
    실제서비스를 수행하는 실제객체를 생성을 바로하는게 하지않고 프록시(대리인)를 이용해 실질적인 메소드가 호출될때 객체도 생성 해버리는 방식
    실제이미지를 보여주기 이전에 미리보기 보여주는 느낌! 웹서버도 마찬가지 실제 DB나 로직이 담긴 서비스를 수행안하고 정적인데이터 트래픽 해결
    ==> 인터페이스를 중간에 두고 각종 타이어들을 교체해줘도 영향없던 자통차 예시처럼 OCP와 DIP를 활용한 디자인패턴
    ==> 흐름만 제어할 뿐 실제객체에서 반환된 결과값을 절대 가공하지않는다.
    
3. Decorator Pattern
    Proxy Pattern + 장식(Decoration) = Decoration Pattern
    ==> 메서드호출의 반환값에 변화를 주기 위해 중간에 장식자(Decorator)를 두는 패턴

4. Singleton Pattern
    클래스의 인스턴스, 즉 객체를 하나만 만들어서 전역으로 사용하는 패턴
    레플릭션을 이용해서 생성을 한다거나 멀티스레드경우에 생기는 문제라거나 더 많다 그 만큼 너무 많이 쓰이는 패턴이니 잘 숙지하기! 
    정적참조변수와 객체반환정적메소드 그리고 private 생성자 세 박자를 잘 기억

5. Template Method Pattern
    상위클래스의 견본 메소드에서 하위클래스가 오버라이딩 한 메소드를 호출하는 DIP를 활용한 패턴

6. Factory Method Pattern

7. Strategy Pattern

8. Template Callback Pattern

9. etc.. Pattern
